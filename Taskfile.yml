version: '3'

set: [ nounset ]

vars:
  SOURCES: .

env:
  COLUMNS: 120
  FORCE_COLOR: 1
  PRE_COMMIT_COLOR: always
  UV_NO_SYNC: 1  # Avoid syncing the virtual environment on `uv run`

tasks:
  default:
    cmd:
      task: all

  .uv:
    desc: Check that UV is installed and lockfile is up-to-date
    internal: true
    silent: true
    preconditions:
      - sh: command -v uv > /dev/null 2>&1
        msg: "Please install UV: https://docs.astral.sh/uv/getting-started/installation/"
      - sh: uv lock --locked
        msg: "Lockfile and project environment is not up-to-date. To update run `uv sync --all-extras --all-groups`."

  install:
    desc: Install the package, dependencies, and pre-commit for local development
    deps: [ .uv ]
    cmds:
      - uv sync --all-extras --all-groups
      - uv run pre-commit install --install-hooks

  upgrade-deps:
    desc: Upgrade all project dependencies and pre-commit hooks
    deps: [ .uv ]
    cmds:
      - uv sync --all-extras --all-groups --upgrade
      - uv run pre-commit autoupdate

  lint:
    desc: Lint python source files
    deps: [ .uv ]
    cmds:
      - uv run ruff check {{.SOURCES}} {{.CLI_ARGS}}
      - uv run ruff format --check {{.SOURCES}}

  format:
    aliases: [ fmt ]
    desc: Format python source files
    deps: [ .uv ]
    cmds:
      - uv run ruff check --fix {{.SOURCES}}
      - uv run ruff format {{.SOURCES}}

  typecheck:
    aliases: [ mypy ]
    desc: Type check python source files
    deps: [ .uv ]
    cmd: uv run mypy{{ if ne (env "MYPY_PRETTY") "0" }} --pretty{{end}} {{.SOURCES}}

  check:
    aliases: [ ci ]
    desc: Lint & typecheck python source files
    deps: [ lint, typecheck ]

  codespell:
    desc: Use Codespell to do spellchecking
    deps: [ .uv ]
    cmd: uv run pre-commit run codespell --all-files

  pre-commit-all:
    desc: Run all pre-commit hooks against all files
    deps: [ .uv ]
    cmd: uv run pre-commit run --verbose --all-files

  security-audit:
    desc: Perform dependencies security audit for known vulnerabilities
    deps: [ .uv ]
    silent: true
    cmd: uv export --no-emit-project --no-header | uv run pip-audit --require-hashes --disable-pip -r /dev/stdin

  deptry:
    desc: Find unused, missing and transitive dependencies in project
    deps: [ .uv ]
    cmd: uv run deptry .

  gitlint:
    desc: Lint git commit
    deps: [ .uv ]
    cmd: uv run gitlint {{.CLI_ARGS}}

  test:
    desc: Run tests without coverage checking
    deps: [ .uv ]
    cmd: uv run pytest {{.PYTEST_ARGS}} {{.CLI_ARGS}}

  test:cov:
    aliases: [ 'test:ci', 'test:all' ]
    desc: Run tests with coverage checking
    deps: [ .uv ]
    vars:
      PYTEST_ARGS: --cov --cov-report term
    cmds:
      - task: test
        vars:
          PYTEST_ARGS:
            ref: .PYTEST_ARGS

  all:
    desc: Run the full set of checks
    cmds:
      - task: format
      - task: typecheck
      - task: codespell
      - task: test:cov

  clean:
    desc: Clear local caches and build artifacts
    cmds:
      - rm -rf `find . -name __pycache__`
      - rm -f `find . -type f -name '*.py[co]'`
      - rm -f `find . -type f -name '*~'`
      - rm -f `find . -type f -name '.*~'`
      - rm -rf .cache
      - rm -rf .mypy_cache
      - rm -rf .pytest_cache
      - rm -rf .ruff_cache
      - rm -rf .task
      - rm -rf htmlcov
      - rm -f .coverage
      - rm -f .coverage.*
      - rm -f coverage.xml
      - rm -rf *.egg-info
      - rm -rf build
      - rm -rf dist
      - rm -rf site
